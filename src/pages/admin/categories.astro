---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { isAuthenticated } from '../../lib/auth';

try {
  const authenticated = await isAuthenticated(Astro.request);
  if (!authenticated) {
    return Astro.redirect('/login');
  }
} catch (error) {
  return Astro.redirect('/login');
}
---

<AdminLayout title="카테고리 관리">
  <div class="space-y-6">
    <!-- 카테고리 추가 폼 -->
    <div class="bg-gray-800 p-6 rounded-lg shadow">
      <h2 class="text-xl font-semibold text-gray-100 mb-4">새 카테고리 추가</h2>
      <form id="categoryForm" class="space-y-4">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-300">카테고리 이름</label>
          <input type="text" id="name" name="name"
            class="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-gray-100 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
        </div>
        <div>
          <label for="slug" class="block text-sm font-medium text-gray-300">슬러그</label>
          <input type="text" id="slug" name="slug"
            class="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-gray-100 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
        </div>
        <div>
          <label for="description" class="block text-sm font-medium text-gray-300">설명</label>
          <textarea id="description" name="description" rows="3"
            class="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-gray-100 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"></textarea>
        </div>
        <div>
          <label for="parentCategory" class="block text-sm font-medium text-gray-300">상위 카테고리</label>
          <select id="parentCategory" name="parentCategory"
            class="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-gray-100 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            <option value="">없음</option>
            <!-- 기존 카테고리들이 여기에 동적으로 추가됨 -->
          </select>
        </div>
        <button type="submit"
          class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          추가하기
        </button>
      </form>
    </div>

    <!-- 카테고리 목록 -->
    <div class="bg-gray-800 p-6 rounded-lg shadow">
      <h2 class="text-xl font-semibold text-gray-100 mb-4">카테고리 목록</h2>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-gray-700">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">이름</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">슬러그</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">설명</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">상위 카테고리</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">작업</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-700" id="categoryList">
            <!-- 카테고리 목록이 여기에 동적으로 추가됨 -->
          </tbody>
        </table>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  // 카테고리 추가 폼 제출 처리
  document.getElementById('categoryForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(e.target as HTMLFormElement);
    const data = Object.fromEntries(formData);

    try {
      const response = await fetch('/api/categories', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify(data)
      });

      if (!response.ok) throw new Error('카테고리 추가 실패');

      // 폼 초기화
      (e.target as HTMLFormElement).reset();
      // 카테고리 목록 새로고침
      loadCategories();
    } catch (error) {
      console.error('Error:', error);
      alert('카테고리 추가 중 오류가 발생했습니다.');
    }
  });

  // 카테고리 목록 로드
  async function loadCategories() {
    try {
      const response = await fetch('/api/categories', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      if (!response.ok) throw new Error('카테고리 로드 실패');

      const categories = await response.json();
      renderCategories(categories);
    } catch (error) {
      console.error('Error:', error);
    }
  }

  // 카테고리 목록 렌더링
  function renderCategories(categories) {
    const tbody = document.getElementById('categoryList');
    if (!tbody) return;

    tbody.innerHTML = categories.map(category => `
      <tr>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">${category.name}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">${category.slug}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">${category.description || '-'}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">${category.parent_name || '-'}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
          <button onclick="editCategory(${category.id})" class="text-indigo-400 hover:text-indigo-300 mr-2">수정</button>
          <button onclick="deleteCategory(${category.id})" class="text-red-400 hover:text-red-300">삭제</button>
        </td>
      </tr>
    `).join('');
  }

  // 초기 로드
  loadCategories();
</script>
